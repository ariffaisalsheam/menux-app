# Production Configuration for Menu.X Backend
spring:
  application:
    name: menu-x-backend
  
  # Database Configuration - Supabase
  datasource:
    url: jdbc:postgresql://db.pcwuvpjuysurnguqlzok.supabase.co:5432/postgres?prepareThreshold=0&sslmode=require
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 3
      minimum-idle: 1
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
  cachePrepStmts: false
    
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        connection:
          provider_disables_autocommit: true
        # Merge duplicate 'jdbc' sections into one to avoid SnakeYAML DuplicateKeyException
        jdbc:
          lob:
            non_contextual_creation: true
          batch_size: 20
        temp:
          use_jdbc_metadata_defaults: false
        use_sql_comments: false
        order_inserts: true
        order_updates: true

  # File Upload Configuration
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api
  error:
    include-message: always
    include-binding-errors: always

# Application Configuration
app:
  # JWT Configuration
  jwt:
    secret: ${JWT_SECRET}
    expiration: ${JWT_EXPIRATION:86400000} # 24 hours in milliseconds
    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 days in milliseconds
    
  # CORS Configuration
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:https://menu-x-frontend.onrender.com}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
    
  # QR Code Configuration
  qr:
    base-url: ${QR_BASE_URL:https://menu-x-frontend.onrender.com/menu}
    image-format: PNG
    width: 300
    height: 300
    
  # AI Configuration
  ai:
    gemini:
      api-key: ${GEMINI_API_KEY}
      base-url: https://generativelanguage.googleapis.com/v1beta
      model: gemini-pro
      
  # File Storage Configuration
  storage:
    type: ${STORAGE_TYPE:local} # local, s3, cloudinary
    local:
      upload-dir: ${LOCAL_UPLOAD_DIR:/tmp/uploads}

# Logging Configuration
logging:
  level:
    com.menux: ${LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:WARN}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_PARAM_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
  file:
    name: ${LOG_FILE:/tmp/menu-x.log}

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized

# API Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
  info:
    title: Menu.X API
    description: Digital Restaurant Communication System API
    version: 1.0.0
    contact:
      name: Menu.X Team
      email: support@menux.com
    license:
      name: MIT License
      url: https://opensource.org/licenses/MIT
